[{"name":"app.R","content":"box::use(shiny[stopApp, br, h1, h2, h3, moduleServer, modalButton, \n               h4, div, tagList, tags, reactiveVal, modalDialog,\n               updateActionButton, uiOutput, reactiveValues, showModal,\n               renderUI, icon, actionButton, observeEvent, req],\n         shinyjs[hide, show, useShinyjs, delay],\n         utils[read.csv],\n         bslib[page_fluid, card],\n         purrr[map],\n         waiter[useWaiter, waiterShowOnLoad, \n                waiterOnBusy, autoWaiter, spin_plus, \n                spin_dots, spin_6, waiter_hide, Waiter],\n         shinyWidgets[radioGroupButtons],\n         htmltools[HTML])\n\nsource(\"global.R\")\n\nui <- page_fluid(\n    useWaiter(),\n    useShinyjs(),\n    \n    tags$head(\n      tags$link(\n        rel = \"stylesheet\",\n        href = \"https://fonts.googleapis.com/css2?family=Maven+Pro:wght@400..900&display=swap\"),\n      tags$link(\n        rel = \"stylesheet\",\n        type = \"text/css\",\n        href = \"styles.css\")\n    ),\n    title = \"Quizapp\",\n    card(\n      full_screen = FALSE,\n      div(\n        class = \"header-title\",\n        tags$img(\n          src = \"appsilon-logo.png\",\n          height = 62,\n          width = 140\n        ),\n        h1(\"Find out which R package you are! 👀\"),\n        actionButton(\n          \"info\", \n          \"\", \n          icon = icon(\"circle-info\")\n        )\n      )\n    ),\n    uiOutput(\"questions\"),\n    div(\n      class = \"proceed-btn\",\n      actionButton(\n        inputId = \"next_level\",\n        label = \"Next\",\n        icon = icon(\"forward-step\")\n      )\n    ),\n    waiterShowOnLoad(\n      color = \"white\",\n      html = tagList(\n        spin_plus(),\n        br(),\n        br(),\n        h2(\"Loading...\")\n      )\n    )\n  )\n\n#' @export\nserver <- function(input, output, session) {\n    \n    # Loading screen\n    Sys.sleep(2)\n    waiter_hide()\n    w <- Waiter$new(color = \"white\", \n                    html = result_waiting_screen(result_waiting_msgs[1]))\n    \n    \n    # modal function\n    display_modal <- function() {\n      modalDialog(\n        description,\n        size = \"l\",\n        easyClose = FALSE,\n        fade = TRUE, \n        footer = modalButton(\n          label = \"Got it\", \n          icon = icon(\"thumbs-up\")\n        )\n      ) |> showModal()\n    }\n    \n    display_modal()\n    \n    # Function to generate question cards\n    question_page <- function(data) {\n      question_list <- map(1:nrow(data), ~ {\n        \n        question_card <-\n          div(class = \"question-container\",\n              card(\n                full_screen = FALSE,\n                div(\n                  class = \"question\",\n                  data[.x, \"Question\"]\n                ),\n                radioGroupButtons(\n                  inputId = paste0(\"options_\", .x),\n                  label = \"\",\n                  choiceNames = c(data[.x, \"Option1\"],\n                                  data[.x, \"Option2\"],\n                                  data[.x, \"Option3\"],\n                                  data[.x, \"Option4\"]),\n                  choiceValues = c(\"a\", \"b\", \"c\", \"d\")\n                )\n              ))\n        return(question_card)\n      })\n      return(question_list)\n    }\n    \n    # Option selection count\n    option_count <-\n      reactiveValues(\n        options = list(\n        a = 0,\n        b = 0,\n        c = 0,\n        d = 0\n      ))\n    \n    \n    # Record selected options\n    record_option_freq <- function(data) {\n      map(1:nrow(data), ~ {\n        id <- paste0(\"options_\", .x)\n        option_count$options[[input[[id]]]] = option_count$options[[input[[id]]]] + 1\n      })\n      option_count_vector <- unlist(option_count$options)\n      max_count_option <-\n        names(option_count_vector)[which.max(option_count_vector)]\n      return(max_count_option)\n    }\n    \n    # Page number count\n    page_number <- reactiveVal(1)\n    \n    # Total # of question pages\n    all_question_pages <- question_page(questions)\n    \n    # First question render\n    output$questions <- renderUI({\n      hide(\"next_level\")\n      div(\n        class = \"start-screen-container\",\n        actionButton(\n          inputId = \"start_btn\",\n          label = \"Start\",\n          icon = icon(\"play\"))\n      )\n    })\n    \n    # Function to navigate to subsequent questions\n    next_page <- function() {\n      page_ui <- \n        if (page_number() < total_no_of_questions + 1) {\n          all_question_pages[[page_number()]]\n        }\n      else {\n        hide(\"next_level\")\n        max_count_option <- record_option_freq(questions)\n        div(class = \"question-container\",\n            card(\n              full_screen = FALSE,\n              div(\n                class = \"analysis-result\",\n                div(\n                  class = \"emoji\",\n                  sample(emojis, 1)\n                ),\n                div(\n                  analysis[[max_count_option]] |> \n                    HTML() |> h3()\n                )\n              )\n            )\n        )\n      }\n      output$questions <- renderUI({\n        if (page_number() < total_no_of_questions + 2) \n          page_ui\n        else {\n          w$show()\n          for(i in 1:length(result_waiting_msgs)){\n            w$update(html = result_waiting_screen(result_waiting_msgs[i]))\n            Sys.sleep(3)\n          }\n          w$hide()\n          page_ui\n        }\n      })\n      \n      if (page_number() == 10) {\n        updateActionButton(\n          inputId = \"next_level\",\n          label = \"Analyse!\",\n          icon = icon(\"gears\")\n        )\n      }\n      page_number(page_number() + 1)\n    }\n    \n    observeEvent(input$info, {\n      display_modal()\n    })\n    \n    observeEvent(input$start_btn, {\n      next_page()\n      hide(\"start_btn\")\n      shinyjs::delay(1000, show(\"next_level\"))\n    })\n    \n    # Question navigation on button click\n    observeEvent(input$next_level, {\n      next_page()\n    })\n  }\n\nshinyApp(ui, server)","type":"text"},{"name":"README.md","content":"# 🎉 Welcome to the Ultimate R Package Personality Quiz! 🚀\n\nDiscover which R package or framework matches your programming style perfectly! Whether you're a seasoned R pro or just dipping your toes into the world of coding, this quiz will unveil your coding soulmate!\n\n# 🔍 How to Play:\n- Dive into each question featuring thrilling programming scenarios.\n- Select the option that screams \"YOU!\" the loudest.\n- No right or wrong answers here, just pick what vibes with your coding spirit!\n\n# 🎁 Results:\nAfter completing the quiz, unlock your match made in R heaven! Your perfect package or framework awaits! Let's dive in and find your coding BFF! 💻\n","type":"text"},{"name":"analysis.csv","content":"\"a\",\"b\",\"c\",\"d\"\n\"You're a data wrangler extraordinaire! You love exploring data, cleaning messes, and transforming it into a usable format. <br><a href = 'https://www.tidyverse.org/'><img src = 'https://avatars.githubusercontent.com/u/22032646?s=200&v=4' height = '140' width = '140' class = 'package-logo'/><\/a>Tidyverse packages like dplyr, ggplot2, and tidyr are your best friends.\",\"You're a statistical powerhouse!  You thrive on building models, testing hypotheses, and uncovering insights from data. <br><a href = 'https://www.tidymodels.org/'><img src = 'https://avatars.githubusercontent.com/u/29100987?s=200&v=4' height = '140' width = '140' class = 'package-logo'/><\/a>Tidymodels packages like rsample, recipe, and parsnip are your go-to tools.\",\"You're a visualization whiz! You love creating interactive dashboards and applications that bring data to life. <br><a href = 'https://shiny.posit.co/'><img src = 'https://raw.githubusercontent.com/rstudio/shiny/main/man/figures/logo.png' width = '140' class = 'package-logo'/><\/a>Shiny is your perfect partner, allowing you to build user-friendly and engaging experiences.\",\"You're a code craftsman! You prioritize clean, maintainable, and scalable code. <br><a href = 'https://rhinoverse.dev/#rhino'><img src = 'https://raw.githubusercontent.com/Appsilon/rhino/main/man/figures/rhino.png' width = '140' class = 'package-logo'/><\/a>Rhinoverse offers the tools and best practices to help you build enterprise-grade Shiny apps you can be proud of. Rhinoverse packages like shiny.semantic, shiny.router, and rhino are your go-to tools.\"\n","type":"text"},{"name":"global.R","content":"box::use(shiny[h4, tagList, br, markdown],\n         utils[read.csv],\n         waiter[spin_dots])\n\n# Import quiz questions\nquestions <- read.csv(\"quiz_questions.csv\")\n\n# Analysis results \nanalysis <- read.csv(\"analysis.csv\")\n\n# Sample emojis\nemojis <- c(\"😃\", \"😄\", \"😍\", \"😊\", \"🤗\", \"😎\", \"😉\")\n\n# Count of total questions\ntotal_no_of_questions <- nrow(questions)\n\n# Result waiting screen messages declaration\nresult_waiting_msgs <- c(\"Analysing your answers...\", \n                         \"Finding a match...\", \n                         \"Match found!\")\n\n# Result waiting screen generate function\nresult_waiting_screen <- function(msg) {\n  tagList(\n    spin_dots(),\n    br(),\n    br(),\n    br(),\n    h4(msg)\n  )\n}\n\n# Quiz description\ndescription <- markdown(readLines(\"README.md\"))","type":"text"},{"name":"quiz_questions.csv","content":"\"Question\",\"Option1\",\"Option2\",\"Option3\",\"Option4\"\n\"When tackling a data analysis problem, you prefer:\",\"Diving straight in and exploring the data\",\"Carefully planning your analysis steps beforehand\",\"Building an interactive dashboard for visualization\",\"Following best practices for enterprise-grade Shiny apps\"\n\"Your coding style is:\",\"Concise and efficient\",\"Structured and modular\",\"Creative and visual\",\"Well-documented and maintainable\"\n\"When faced with errors, you:\",\"Experiment with different approaches\",\"Debug methodically and systematically\",\"Consult online resources and forums\",\"Leverage built-in testing frameworks\"\n\"You find most satisfaction in:\",\"Data manipulation and cleaning\",\"Building statistical models\",\"Creating interactive applications\",\"Building production-ready Shiny apps\"\n\"Your ideal work environment is:\",\"Playful and exploratory\",\"Organized and methodical\",\"Dynamic and visually engaging\",\"Collaborative and focused on best practices\"\n\"Your weekends are spent:\",\"Learning new R packages and functions\",\"Deep-diving into statistical theory\",\"Creating data visualizations and dashboards\",\"Building reusable and maintainable code\"\n\"When explaining your code to others, you:\",\"Use clear and concise examples\",\"Emphasize the logic and structure\",\"Focus on the visual representation\",\"Highlight the documentation and testing\"\n\"Your dream project involves:\",\"Wrangling messy datasets\",\"Creating predictive models\",\"Building a user-friendly data exploration app\",\"Developing a complex and scalable Shiny dashboard\"\n\"Your favorite R feature is:\",\"The power of %>% operator\",\"The vast array of statistical models\",\"The ease of creating interactive plots\",\"The focus on code reusability and testing\"\n\"After a long coding session, you unwind by:\",\"Trying out a new data analysis challenge\",\"Reading research papers on statistical methods\",\"Playing around with interactive data visualizations\",\"Writing unit tests and documentation\"","type":"text"},{"name":"www/styles.css","content":"body {\n  font-family: 'Maven Pro', sans-serif;\n  background: #f0f6ff;\n}\n\n.btn-group {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  margin: 0 50px 30px;\n}\n\n.btn {\n  border-radius: 30px !important;\n  font-size: 20px;\n}\n\n.btn-check:checked + .btn {\n  background-color: #0099f9;\n  border-color: #0099f9;\n}\n\n#info {\n  color: gray;\n  width: 32px;\n  margin-left: auto;\n  padding: 0;\n  background-color: white;\n  border-color: white;\n}\n\n#info:hover {\n  color: #0099f9;\n}\n\n.btn-default:hover {\n  background-color: #ff3658;\n  border-color: #ff3360;\n}\n\n.btn-default {\n  border-color: #ff3360;\n  color: #ff3658;\n}\n\n.proceed-btn,\n.analysis-result,\n.question,\n.start-screen-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.modal-body {\n  padding: 1.5rem 1.5rem 0;\n}\n\n.modal-footer {\n  padding: 0 1.5rem 1.5rem;\n}\n\n.start-screen-container {\n  height: 500px;\n}\n\n#start_btn {\n  height: 140px;\n  width: 300px;\n  border-radius: 70px !important;\n  font-size: 35px;\n}\n\n.header-title {\n  display: grid;\n  grid-template-columns: 140px auto 140px;\n  align-items: center;\n}\n\n.analysis-result {\n  flex-direction: column;\n  padding: 0 15px;\n}\n\n.emoji {\n  font-size: 80px;\n}\n\n.package-logo {\n  float: left;\n  margin: 25px 25px 25px 0;\n}\n\nh1 {\n  color: #0099f9;\n  font-weight: 500;\n  font-size: 35px;\n  margin: 0 auto;\n}\n\nh4,\nh2 {\n  color: black;\n}\n\np,\nli {\n  font-size: 20px;\n}\n\n.question {\n  font-size: 25px;\n  margin: 0 50px;\n}\n\n.question-container {\n  margin: 0 100px;\n}\n","type":"text"}]
